val P = SizeVar("P") // number of points
val C = SizeVar("C") // number of clusters
val F = SizeVar("F") // number of features

val featuresType    = ArrayType(ArrayType(Float, P), F)
val clustersType    = ArrayType(ArrayType(Float, F), C)

val test = UserFun("test", Array("dist", "tuple"),
  "{" +
    "float min_dist = tuple._0;" +
    "int i          = tuple._1;" +
    "int index      = tuple._2;" +
    "if (dist < min_dist) {" +
    "  Tuple t = {dist, i + 1, i};" +
    "  return t;" +
    "} else {" +
    "  Tuple t = {min_dist, i + 1, index};" +
    "  return t;" +
    "}" +
    "}",
  Seq(Float, TupleType(Float, Int, Int)), TupleType(Float, Int, Int))

val select = UserFun("select_", Array("tuple"),
    "{ return tuple._2; }",
    Seq(TupleType(Float, Int, Int)), Int)

val currentDistance = UserFun("currentDistance", Array("x", "y"),
    "{ return (x - y) * (x - y); }",
    Seq(Float, Float), Float)

fun(
    featuresType, clustersType,
    (features, clusters) =>
    Map( \( feature =>
      Map(Map(select)) o
      ReduceSeq( \( (tuple, cluster) =>
        Map(\((x) => test(x._0,x._1)))
      $ Zip(Reduce(add, 0.0f) o
        Map(fun(x => currentDistance(x._0, x._1))) $ Zip(feature, cluster), tuple)
      ), Value("{3.40282347e+38, 0, 0}", ArrayType(TupleType(Float, Int, Int),1))
   ) $ clusters
)) o Transpose() $ features
)
