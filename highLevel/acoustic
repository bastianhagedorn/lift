def getNumNeighbours = UserFun("idxF", Array("i", "j", "k", "m", "n", "o"), "{int count = 6; if(i == (m-1) || i == 0){ count--; } if(j == (n-1) || j == 0){ count--; } if(k == (o-1) || k == 0){ count--; }return count; }", Seq(Int,Int,Int,Int,Int,Int), Int)
def getCF = UserFun("getCF", Array("neigh", "cfB", "cfI"), "{ if(neigh < 6) { return cfB; } else{ return cfI;} }", Seq(Int,Float,Float), Float)

val SR = 441.0f
val alpha = 0.005f
val c = 344.0f
val NF = 4410
val k = 1 / SR
val h = Math.sqrt(3.0f) * c * k
val lambda = c * k / h

val loss1 = 1.0f / (1.0f + lambda * alpha)
val loss2 = 1.0f - lambda * alpha

val l2: Float = ((c * c * k * k) / (h * h)).toFloat
val cf1: Array[Float] = Array(loss1.toFloat, 1.0f)
val cf21: Array[Float] = Array(loss2.toFloat, 1.0f)

val idIF = UserFun("idIF", "x", "{ return (float)(x*1.0); }", Int, Float)
val m = SizeVar("M")
val n = SizeVar("N")
val o = SizeVar("O")

val arraySig = ArrayType(ArrayType(ArrayType(Int, m), n), o)

fun(
  ArrayType(ArrayType(ArrayType(Float, m), n), o),
  ArrayType(ArrayType(ArrayType(Float, m+2), n+2), o+2),
  (mat1, mat2) => {
    Map(Map(Map(fun(m => {

      val cf = toPrivate( fun(x => getCF(x,cf1(0), cf1(1))) ) $ Get(m,2)
      val cf2 = toPrivate( fun(x => getCF(x,cf21(0), cf21(1))) ) $ Get(m,2)
      val maskedValStencil = l2

      val `tile[1][1][1]` = Get(m,1).at(1).at(1).at(1)

      val `tile[0][1][1]` = Get(m,1).at(0).at(1).at(1)
      val `tile[1][0][1]` = Get(m,1).at(1).at(0).at(1)
      val `tile[1][1][0]` = Get(m,1).at(1).at(1).at(0)
      val `tile[1][1][2]` = Get(m,1).at(1).at(1).at(2)
      val `tile[1][2][1]` = Get(m,1).at(1).at(2).at(1)
      val `tile[2][1][1]` = Get(m,1).at(2).at(1).at(1)

      val stencil =  toPrivate(fun(x => add(x,`tile[0][1][1]`))) o
        toPrivate(fun(x => add(x,`tile[1][0][1]`))) o
        toPrivate(fun(x => add(x,`tile[1][1][0]`))) o
        toPrivate(fun(x => add(x,`tile[1][1][2]`))) o
        toPrivate(fun(x => add(x,`tile[1][2][1]`))) $ `tile[2][1][1]`

      val valueMat1 = Get(m,0)
      val valueMask = toPrivate(idIF) $ Get(m,2)

      toGlobal(id) o toPrivate(fun( x => mult(x,cf))) o toPrivate(addTuple) $
        Tuple(toPrivate(multTuple) $ Tuple(toPrivate(fun(x => subtract(2.0f,x))) o toPrivate(fun(x => mult(x,l2))) $ valueMask, `tile[1][1][1]`),
          toPrivate(subtractTuple) $ Tuple(
            toPrivate(fun(x => mult(x, maskedValStencil))) $ stencil,
            toPrivate(fun(x => mult(x,cf2))) $ valueMat1))

    })))
    ) $ Zip3D(mat1, Slide3D(3, 1) $ mat2, Array3DFromUserFunGenerator(getNumNeighbours, arraySig))
})